const app = require('../app')
const request = require('supertest')
const pool = require('../configs/dbConnection')

describe(`integration testing`, () => {
    afterEach((done) => {
        pool.query(`DELETE FROM log`, (err) => {
            if (err) done(err)
            else done()
        })
    })
    describe(`GET /search`, () => {
        describe(`success fetch imdb API`, () => {
            test(`should send an object (Search, totalResults, Response) with status code 200`, (done) => {
                request(app)
                    .get('/search')
                    .query({ title: 'Batman', page: 3 })
                    .end((err, res) => {
                        expect(err).toBe(null)
                        expect(res.status).toBe(200)
                        expect(res.body).toHaveProperty(`Search`, expect.any(Object))
                        expect(res.body).toHaveProperty(`totalResults`, expect.any(String))
                        expect(res.body).toHaveProperty(`Response`, expect.any(String))
                        expect(Array.isArray(res.body.Search)).toBe(true)
                        expect(res.body.Search[0]).toHaveProperty(`Title`)
                        expect(res.body.Search[0]).toHaveProperty(`Year`)
                        expect(res.body.Search[0]).toHaveProperty(`imdbID`)
                        expect(res.body.Search[0]).toHaveProperty(`Type`)
                        expect(res.body.Search[0]).toHaveProperty(`Poster`)
                        done()
                    })
            })
        })
        describe(`success fetch imdb API but no result`, () => {
            test(`should sent an object (Response, Error) with status code 200 when title is invalid`, (done) => {
                request(app)
                .get(`/search`)
                .query({ title: `invalidTitle` })
                .end((err, res) => {
                    expect(err).toBe(null)
                    expect(res.status).toBe(200)
                    expect(res.body).toHaveProperty(`Response`, expect.any(String))
                    expect(res.body).toHaveProperty(`Error`, expect.any(String))  
                    done()                 
                })
            })
        })
        describe(`error hit /search`, () => {
            test(`should sent error when queryParams title is not inserted`, (done) => {
                request(app)
                .get(`/search`)
                .end((err, res) => {
                    expect(err).toBe(null)
                    expect(res.status).toBe(400)
                    expect(res.body).toHaveProperty(`error`, expect.any(String))
                    done()
                })
            })
        })
    })
    describe(`GET /detail`, () => {
        describe(`success fetch imdb API`, () => {
            test(`should send an object with status code 200 when id valid`, (done) => {
                request(app)
                    .get('/detail')
                    .query({ id: 'tt2313197' })
                    .end((err, res) => {
                        expect(err).toBe(null)
                        expect(res.status).toBe(200)
                        expect(res.body).toHaveProperty(`Title`, expect.any(String))
                        expect(res.body).toHaveProperty(`Year`, expect.any(String))
                        expect(res.body).toHaveProperty(`Rated`, expect.any(String))
                        expect(res.body).toHaveProperty(`Released`, expect.any(String))
                        expect(res.body).toHaveProperty(`Runtime`, expect.any(String))
                        expect(res.body).toHaveProperty(`Genre`, expect.any(String))
                        expect(res.body).toHaveProperty(`Director`, expect.any(String))
                        expect(res.body).toHaveProperty(`Writer`, expect.any(String))
                        expect(res.body).toHaveProperty(`Actors`, expect.any(String))
                        expect(res.body).toHaveProperty(`Plot`, expect.any(String))
                        expect(res.body).toHaveProperty(`Language`, expect.any(String))
                        expect(res.body).toHaveProperty(`Country`, expect.any(String))
                        expect(res.body).toHaveProperty(`Awards`, expect.any(String))
                        expect(res.body).toHaveProperty(`Poster`, expect.any(String))
                        expect(res.body).toHaveProperty(`Ratings`, expect.any(Object))
                        expect(res.body).toHaveProperty(`Metascore`, expect.any(String))
                        expect(res.body).toHaveProperty(`imdbRating`, expect.any(String))
                        expect(res.body).toHaveProperty(`imdbVotes`, expect.any(String))
                        expect(res.body).toHaveProperty(`imdbID`, expect.any(String))
                        expect(res.body).toHaveProperty(`Type`, expect.any(String))
                        expect(res.body).toHaveProperty(`DVD`, expect.any(String))
                        expect(res.body).toHaveProperty(`BoxOffice`, expect.any(String))
                        expect(res.body).toHaveProperty(`Production`, expect.any(String))
                        expect(res.body).toHaveProperty(`Website`, expect.any(String))
                        expect(res.body).toHaveProperty(`Response`, expect.any(String))
                        done()
                    })
            })
        })
        describe(`success fetch imdb API but no result`, () => {
            test(`should sent an object (Response, Error) with status code 200 when id is invalid`, (done) => {
                request(app)
                .get(`/detail`)
                .query({ id: 12345})
                .end((err,res) => {
                    expect(err).toBe(null)
                    expect(res.status).toBe(200)
                    expect(res.body).toHaveProperty(`Response`, expect.any(String))
                    expect(res.body).toHaveProperty(`Error`, expect.any(String))
                    done()
                })
            })
            test(`should sent an object (Response, Error) with status code 200 when id is not inserted`, (done) => {
                request(app)
                .get(`/detail`)
                .end((err,res) => {
                    expect(err).toBe(null)
                    expect(res.status).toBe(200)
                    expect(res.body).toHaveProperty(`Response`, expect.any(String))
                    expect(res.body).toHaveProperty(`Error`, expect.any(String))
                    done()
                })
            })
        })
    })
})